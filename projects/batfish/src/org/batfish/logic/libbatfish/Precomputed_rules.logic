block(`Precomputed_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:Bgp),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:CommunityList),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Precomputed),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

AdvertisementClusterId(advert, clusterId) <-
   SetBgpAdvertisementClusterId(pcIndex, clusterId),
   PrecomputedAdvertisement_index(advert, pcIndex).

BgpAdvertisement(advert),
BgpAdvertisement_constructor[type, network, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType] = advert,
BgpAdvertisement_dstIp[advert] = dstIp,
BgpAdvertisement_dstNode[advert] = dstNode,
BgpAdvertisement_localPref[advert] = localPref,
BgpAdvertisement_med[advert] = med,
BgpAdvertisement_network[advert] = network,
BgpAdvertisement_nextHopIp[advert] = nextHopIp,
BgpAdvertisement_originatorIp[advert] = originatorIp,
BgpAdvertisement_originType[advert] = originType,
BgpAdvertisement_srcIp[advert] = srcIp,
BgpAdvertisement_srcNode[advert] = srcNode,
BgpAdvertisement_srcProtocol[advert] = srcProtocol,
BgpAdvertisement_type[advert] = type,
PrecomputedAdvertisement_index(advert, pcIndex)
<-
   SetBgpAdvertisement_flat(pcIndex, type, network_start, network_end, prefix_length, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType, localPref, med, originatorIp),
   Network_constructor[network_start, network_end, prefix_length] = network.

AdvertisementCommunity(advert, community) <-
   SetBgpAdvertisementCommunity(pcIndex, community),
   PrecomputedAdvertisement_index(advert, pcIndex).

AdvertisementPath(advert, index, as) <-
   SetBgpAdvertisementPath(pcIndex, index, as),
   PrecomputedAdvertisement_index(advert, pcIndex).

AdvertisementPathSize[advert] = size <-
   SetBgpAdvertisementPathSize(pcIndex, size),
   PrecomputedAdvertisement_index(advert, pcIndex).

BestPerProtocolRoute(route) <-
   PrecomputedRoute(route).

IbgpNeighbors(node1, ip1, node2, ip2) <-
   SetIbgpNeighbors(node1, ip1, node2, ip2).

SetPrecomputedRoute(node, network, nextHopIp, admin, cost, protocol, tag) <-
   SetPrecomputedRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, admin, cost, protocol, tag),
   Network_constructor[network_start, network_end, prefix_length] = network.

// Precomputed route with next hop ip
PrecomputedRoute(route),
   Route(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol,
   Route_tag[route] = tag
<-
   SetPrecomputedRoute(node, network, nextHopIp, admin, cost, protocol, tag).

// END CODE
   })
} <-- .
