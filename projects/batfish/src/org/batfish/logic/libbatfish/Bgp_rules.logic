block(`Bgp_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:Bgp),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:CommunityList),
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

// copy old path elements
AdvertisementPath(advert, index, as) <-
   ParentAdvertisement(prevAdvert, advert),
   AdvertisementPath(prevAdvert, index, as).

// i/ebgp base advertisement inherits community from bgp and ibgp
AdvertisementCommunity(advert, community) <-
   (
      priorType = AdvertisementType_BGP_TI[] ;
      priorType = AdvertisementType_IBGP_TI[]
   ),
   AdvertisementCommunity(prevAdvert, community),
   BgpAdvertisement_type[prevAdvert] = priorType,
   ParentAdvertisement(prevAdvert, advert).

BestBgpAdvertisement(advert) <-
   MinAsPathLengthBgpAdvertisement(advert).

BestPerProtocolRoute(route) <-
   BestBgpRoute(route) ;
   BestIbgpRoute(route).

BgpDefaultLocalPref(node, neighborIp, localPref) <-
   SetBgpDefaultLocalPref(node, neighborNetwork, localPref),
   NetworkOf[neighborIp, _] = neighborNetwork.

BgpNeighborDefaultMetric(node, neighborIp, metric) <-
   SetBgpNeighborDefaultMetric(node, neighborNetwork, metric),
   NetworkOf[neighborIp, _] = neighborNetwork.

BgpNeighborIp(node, neighborIp) <-
   SetBgpNeighborNetwork(node, neighborNetwork),
   NetworkOf[neighborIp, _] = neighborNetwork.

BgpNeighbors(node1, ip1, node2, ip2) <-
   IpReadyInt(node1, int1, ip1, _),
   IpReadyInt(node2, int2, ip2, _),
   LanAdjacent(node1, int1, node2, int2),
   BgpNeighborIp(node1, ip2),
   BgpNeighborIp(node2, ip1).

BgpNeighborSendCommunity(node, neighborIp) <-
   SetBgpNeighborSendCommunity(node, neighborNetwork),
   NetworkOf[neighborIp, _] = neighborNetwork.

InstalledBgpAdvertisement(advert) <-
   InstalledBgpAdvertisementRoute[advert] = _.

InstalledBgpAdvertisementRoute[advert] = route <-
   BgpAdvertisementRoute[advert] = route,
   InstalledRoute(route).

LocalAs(node, neighborIp, localAs) <-
   SetLocalAs(node, neighborNetwork, localAs),
   NetworkOf[neighborIp, _] = neighborNetwork.

MaxLocalPref[node, network] = maxLocalPref <-
   agg<<maxLocalPref = max(localPref)>>
      ReceivedBgpAdvertisement(advert),
      BgpAdvertisement_dstNode[advert] = node,
      BgpAdvertisement_localPref[advert] = localPref,
      BgpAdvertisement_network[advert] = network.

MaxLocalPrefBgpAdvertisement(advert) <-
   ReceivedBgpAdvertisement(advert),
   !OriginatedBgpNetwork(node, network),
   BgpAdvertisement_dstNode[advert] = node,
   BgpAdvertisement_localPref[advert] = localPref,
   BgpAdvertisement_network[advert] = network,
   MaxLocalPref[node, network] = localPref.

MinAsPathLengthBgpAdvertisement(advert) <-
   MaxLocalPrefBgpAdvertisement(advert),
   BgpAdvertisement_dstNode[advert] = node,
   BgpAdvertisement_network[advert] = network,
   AdvertisementPathSize[advert] = bestAsPathSize,
   MinAsPathSize[node, network] = bestAsPathSize.

MinAsPathSize[node, network] = minSize <-
   agg<<minSize = min(size)>>
      MaxLocalPrefBgpAdvertisement(advert),
      BgpAdvertisement_dstNode[advert] = node,
      BgpAdvertisement_network[advert] = network,
      AdvertisementPathSize[advert] = size.

need_PolicyMapMatchAdvert(map, advert)
<-
   (
      type = AdvertisementType_BGP[] ;
      type = AdvertisementType_IBGP[]
   ),
   BgpAdvertisement_srcNode[advert] = srcNode,
   BgpAdvertisement_dstIp[advert] = dstIp,
   BgpAdvertisement_type[advert] = type,
   BgpExportPolicy(srcNode, dstIp, map).

OriginalBgpAdvertisement(advert) <-
   OriginalBgpAdvertisementRoute(advert, _).

ReceivedBgpAdvertisement(advert) <-
   BgpAdvertisement_type[advert] = type,
   (
      type = AdvertisementType_BGP_TI[] ;
      type = AdvertisementType_IBGP_TI[]
   ).

RemoteAs(node, neighborIp, remoteAs) <-
   SetRemoteAs(node, neighborNetwork, remoteAs),
   NetworkOf[neighborIp, _] = neighborNetwork.

SetBgpDefaultLocalPref(node, neighborNetwork, localPref) <-
   SetBgpDefaultLocalPref_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, localPref),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

SetBgpNeighborDefaultMetric(node, neighborNetwork, metric) <-
   SetBgpNeighborDefaultMetric_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, metric),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

SetBgpNeighborNetwork(node, neighborNetwork) <-
   SetBgpNeighborNetwork_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

SetBgpNeighborSendCommunity(node, neighborNetwork) <-
   SetBgpNeighborSendCommunity_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

SetLocalAs(node, neighborNetwork, localAs) <-
   SetLocalAs_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, localAs),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

SetRemoteAs(node, neighborNetwork, remoteAs) <-
   SetRemoteAs_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, remoteAs),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.

lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.

// END CODE
   })

} <-- .
