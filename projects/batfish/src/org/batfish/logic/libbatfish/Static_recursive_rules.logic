block(`Static_recursive_rules) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

SetStaticRoute(node, network, nextHopIp, admin, tag) <-
   SetStaticRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, admin, tag),
   Network_constructor[network_start, network_end, prefix_length] = network.

// static route with next hop ip
StaticRoute(route),
   Route(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol,
   Route_tag[route] = tag
<-
   LongestPrefixNetworkMatch(node, nextHopIp, matchNet),
   network != matchNet,
   SetStaticRoute(node, network, nextHopIp, admin, tag),
   cost = 0,
   protocol = RoutingProtocol_STATIC[].

lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })
} <-- .
