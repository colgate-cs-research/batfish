block(`Ospf_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Ospf),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

BestPerProtocolRoute(route) <-
   BestOspfRoute(route) ;
   BestOspfE1Route(route) ;
   BestOspfE2Route(route) ;
   BestOspfIARoute(route).

OspfNeighbors(node1, int1, cost1, node2, int2, cost2, network, area) <-
   OspfNode(node1, int1, cost1, network, area),
   OspfNode(node2, int2, cost2, network, area),
   LanAdjacent(node1, int1, node2, int2).

OspfNode(node, interface, cost, network, area) <-
   IpReadyInt(node, interface, ip, prefix_length),
   SetOspfInterfaceCost[node, interface] = cost,
   SetOspfInterface(node, interface, area),
   NetworkOf[ip, prefix_length] = network.

lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.
lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
// END CODE
   })
} <-- .

