block(`Bgp_ebgp_bgp_origination_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:Bgp),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

// advertise a transit route received through ibgp or ebgp
BgpAdvertisement(advert),
BgpAdvertisement_constructor[type, dstIpBlock, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType] = advert,
BgpAdvertisement_dstIp[advert] = dstIp,
BgpAdvertisement_dstNode[advert] = dstNode,
BgpAdvertisement_localPref[advert] = localPref,
BgpAdvertisement_med[advert] = med,
BgpAdvertisement_network[advert] = dstIpBlock,
BgpAdvertisement_nextHopIp[advert] = nextHopIp,
BgpAdvertisement_originatorIp[advert] = originatorIp,
BgpAdvertisement_originType[advert] = originType,
BgpAdvertisement_srcIp[advert] = srcIp,
BgpAdvertisement_srcNode[advert] = srcNode,
BgpAdvertisement_srcProtocol[advert] = srcProtocol,
BgpAdvertisement_type[advert] = type,
ParentAdvertisement(prevAdvert, advert),
AdvertisementPathSize[advert] = pathSize
<-
   type = AdvertisementType_BGP[],
   originatorIp = Ip_NONE[],
   (
      BgpAdvertisement_type[prevAdvert] = AdvertisementType_BGP_TI[] ;
      BgpAdvertisement_type[prevAdvert] = AdvertisementType_IBGP_TI[]
   ),
   BgpAdvertisement_network[prevAdvert] = dstIpBlock,
   BgpAdvertisement_nextHopIp[prevAdvert] = origNextHopIp,
   BgpAdvertisement_srcProtocol[prevAdvert] = srcProtocol,
   BgpAdvertisement_dstNode[prevAdvert] = srcNode,
   AdvertisementPathSize[prevAdvert] = prevPathSize,
   InstalledBgpAdvertisement(prevAdvert),
   pathSize = prevPathSize,
   BestBgpAdvertisement(prevAdvert),
   (
      BgpDefaultLocalPref(srcNode, dstIp, localPref);
      (
         !BgpDefaultLocalPref(srcNode, dstIp, _),
         localPref = 100
      )
   ),
   originType = OriginType_EGP[],
   BgpNeighborDefaultMetric(srcNode, dstIp, med),
   nextHopIp = srcIp,
   origNextHopIp != dstIp,
   BgpNeighbors(srcNode, srcIp, dstNode, dstIp).

lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })

} <-- .
