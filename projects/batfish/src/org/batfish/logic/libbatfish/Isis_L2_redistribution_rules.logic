block(`Isis_L2_redistribution_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Isis),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

// (base case - import routes exported into L2 by L2 neighbors
IsisL2Route(route),
   Route(route),
   NonIsisExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   IsisL2Neighbors(node, _, nodeIntCost, nextHop, nextHopInt, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   node != nextHop,
   IsisExport(nextHop, network, exportCost, protocol),
   cost = exportCost + nodeIntCost,
   protocol = RoutingProtocol_ISIS_L2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })
} <-- .
