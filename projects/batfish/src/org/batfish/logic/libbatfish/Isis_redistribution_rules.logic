block(`Isis_redistribution_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Isis),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

// (route redistribution)
IsisExport(node, network, newCost, protocol) <-
   (
      InstalledRoute(route) ;
      (
         IsisGeneratedRoute(route),
         ActiveGeneratedRoute(route)
      )
   ),
   !NonIsisExportableRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetIsisOutboundPolicyMap(node, map),
   (
      SetPolicyMapIsisExternalRouteType(map, protocol) ;
      (
         !SetPolicyMapIsisExternalRouteType(map, _),
         SetPolicyMapClauseSetProtocol(map, clause, protocol)
      )
   ),
   PolicyMapPermitRoute(map, clause, route),
   (
      SetPolicyMapClauseSetMetric(map, clause, newCost) ;
      (
         !SetPolicyMapClauseSetMetric(map, clause, _),
         Route_cost[route] = newCost
      )
   ),
   (
      !ConnectedRoute(node, network, _) ;
      (
         ConnectedRoute(node, network, interface),
         !SetIsisInterfaceCost[node, interface] = _
      )
   ).

need_PolicyMapMatchRoute(map, route) <-
   SetIsisOutboundPolicyMap(node, map),
   Route_node[route] = node,
   (
      InstalledRoute(route) ;
      (
         IsisGeneratedRoute(route),
         ActiveGeneratedRoute(route)
      )
   ).

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })
} <-- .
