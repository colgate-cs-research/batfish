block(`Layer2_rules) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Layer2),
   clauses(`{
// BEGIN CODE

LanAdjacent(node1, int1, node2, int2) <-
   SamePhysicalSegment(node1, int1, node2, int2).

/*
// adjacent access vlan interfaces
LanAdjacent(node1, int1, node2, int2) <-
   SamePhysicalSegment(node1, int1, switch, sInt1),
   SwitchportAccess(switch, sInt1, vlan),
   SwitchportAccess(switch, sInt2, vlan),
   LanAdjacent(node2, int2, switch, sInt2).
// access vlans are trunked natively
LanAdjacent(node1, int1, node2, int2) <-
   SamePhysicalSegment(node1, int1, switch1, sInt11),
   SwitchportAccess(switch1, sInt11, vlan),
   SwitchportTrunkAllows(switch1, sInt12, vlan),
   SwitchportTrunkNative(switch1, sInt12, vlan),
   SamePhysicalSegment(switch1, sInt12, switch2, sInt21),
   SwitchportTrunkNative(switch2, sInt21, vlan),
   SwitchportTrunkAllows(switch2, sInt21, vlan),
   SwitchportAccess(switch2, sInt22, vlan),
   LanAdjacent(node2, int2, switch2, sInt22).
// access vlans are separate from each native vlan in the trunk
LanAdjacent(node1, int1, node2, int2) <-
   SamePhysicalSegment(node1, int1, switch1, sInt11),
   SwitchportAccess(switch1, sInt11, vlan),
   SwitchportTrunkAllows(switch1, sInt12, vlan),
   SwitchportTrunkNative(switch1, sInt12, vlan1),
   vlan != vlan1,
   SetSwitchportTrunkEncapsulation(switch1, sInt12, encap),
   SamePhysicalSegment(switch1, sInt12, switch2, sInt21),
   SetSwitchportTrunkEncapsulation(switch1, sInt12, encap),
   vlan != vlan2,
   SwitchportTrunkNative(switch2, sInt21, vlan2),
   SwitchportTrunkAllows(switch2, sInt21, vlan),
   SwitchportAccess(switch2, sInt22, vlan),
   LanAdjacent(node2, int2, switch2, sInt22).
// vlan adjacencies
LanAdjacent(node1, int1, node2, int2) <-
   VlanAdjacent(node1, int1, node2, int2).

SwitchportAccess(switch, interface, vlan) <-
   SetSwitchportAccess(switch, interface, vlan),
   SetActiveInt(switch, interface).

SwitchportTrunkAllows(switch, interface, vlan) <-
   SetSwitchportTrunkAllows(switch, interface, vlanStart, vlanEnd),
   UsedVlan(vlan),
   VlanNumber[vlan] >= VlanNumber[vlanStart],
   VlanNumber[vlan] <= VlanNumber[vlanEnd].

SwitchportTrunkNative(switch, interface, vlan) <-
   SetSwitchportTrunkNative(switch, interface, vlan),
   SetActiveInt(switch, interface).

UsedVlan(vlan) <-
   SetVlanInterface(_, _, vlan).

VlanAdjacent(node1, vlanInt1, node2, vlanInt2) <-
   SetVlanInterface(node1, vlanInt1, vlan),
   SetVlanInterface(node2, vlanInt2, vlan),
   SwitchportTrunkAllows(node1, int1, vlan),
   SwitchportTrunkAllows(node2, int2, vlan),
   LanAdjacent(node1, int1, node2, int2).
VlanAdjacent(node1, vlanInt1, node2, vlanInt2) <-
   node1 != node2,
   node1 != node3,
   node2 != node3,
   VlanAdjacent(node1, vlanInt1, node3, _),
   VlanAdjacent(node3, _, node2, vlanInt2).

VlanNumber[x] = n <-
   Vlan_number(x:n).
*/
// END CODE
   })
} <-- .

