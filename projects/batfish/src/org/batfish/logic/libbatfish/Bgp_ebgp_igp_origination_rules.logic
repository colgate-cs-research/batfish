block(`Bgp_ebgp_igp_origination_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:Bgp),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

// advertise an internally received route
BgpAdvertisement(advert),
BgpAdvertisement_constructor[type, network, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType] = advert,
AdvertisementPathSize[advert] = pathSize,
BgpAdvertisement_dstIp[advert] = dstIp,
BgpAdvertisement_dstNode[advert] = dstNode,
BgpAdvertisement_localPref[advert] = localPref,
BgpAdvertisement_med[advert] = med,
BgpAdvertisement_network[advert] = network,
BgpAdvertisement_nextHopIp[advert] = nextHopIp,
BgpAdvertisement_originatorIp[advert] = originatorIp,
BgpAdvertisement_originType[advert] = originType,
BgpAdvertisement_srcIp[advert] = srcIp,
BgpAdvertisement_srcNode[advert] = srcNode,
BgpAdvertisement_srcProtocol[advert] = srcProtocol,
BgpAdvertisement_type[advert] = type,
OriginalBgpAdvertisementRoute(advert, route),
OriginatedBgpNetwork(srcNode, network)
<-
   type = AdvertisementType_BGP[],
   pathSize = 0,
   nextHopIp = srcIp,
   originatorIp = Ip_NONE[],
   BgpNeighbors(srcNode, srcIp, dstNode, dstIp),
   BgpNeighborIp(srcNode, dstIp),
   originType = OriginType_IGP[],
   BgpNeighborDefaultMetric(srcNode, dstIp, med),
   (
      BgpDefaultLocalPref(srcNode, dstIp, localPref) ;
      (
         !BgpDefaultLocalPref(srcNode, dstIp, _),
         localPref = 100
      )
   ),
   Route_network[route] = network,
   Route_protocol[route] = srcProtocol,
   Route_node[route] = srcNode,
   (
      (
         ActiveGeneratedRoute(route),
         BgpGeneratedRoute(route)
      ) ;
      (
         ActiveGeneratedRoute(route),
         BgpNeighborGeneratedRoute(route),
         BgpNeighborGeneratedRoute_neighborIp[route] = dstIp
      ) ;
      (
         InstalledRoute(route),
         srcProtocol != RoutingProtocol_BGP[],
         srcProtocol != RoutingProtocol_IBGP[],
         (
            !BgpOriginationPolicy(srcNode, dstIp, _);
            (
               BgpOriginationPolicy(srcNode, dstIp, map),
               PolicyMapPermitRoute(map, _, route)
            )
         )
      )
   ).

need_PolicyMapMatchRoute(map, route) <-
   (
      InstalledRoute(route) ;
      BgpGeneratedRoute(route) ;
      (
         BgpNeighborGeneratedRoute(route),
         BgpNeighborGeneratedRoute_neighborIp[route] = neighborIp
      )
   ),
   Route_node[route] = node,
   BgpOriginationPolicy(node, neighborIp, map),
   BgpNeighbors(node, _, _, neighborIp).

lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })

} <-- .
