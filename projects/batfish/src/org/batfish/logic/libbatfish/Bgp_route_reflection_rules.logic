block(`Bgp_route_reflection_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:Bgp),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:Ip),
   clauses(`{
// BEGIN CODE

AdvertisementClusterId(advert, clusterId) <-
   (
      priorType = AdvertisementType_IBGP[] ;
      priorType = AdvertisementType_IBGP_TI[] ;
      priorType = AdvertisementType_IBGP_TO[]
   ),
   BgpAdvertisement_type[prevAdvert] = priorType,
   ParentAdvertisement(prevAdvert, advert),
   AdvertisementClusterId(prevAdvert, clusterId).
AdvertisementClusterId(advert, clusterId) <-
   type = AdvertisementType_IBGP[],
   BgpAdvertisement_type[advert] = type,
   BgpAdvertisement_originatorIp[advert] = originatorIp,
   BgpAdvertisement_srcNode[advert] = srcNode,
   BgpAdvertisement_dstIp[advert] = dstIp,
   originatorIp != Ip_NONE[],
   RouteReflectorClient(srcNode, dstIp, clusterId).

// ibgp route reflection
BgpAdvertisement(advert),
BgpAdvertisement_constructor[type, dstIpBlock, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType] = advert,
BgpAdvertisement_dstIp[advert] = dstIp,
BgpAdvertisement_dstNode[advert] = dstNode,
BgpAdvertisement_localPref[advert] = localPref,
BgpAdvertisement_med[advert] = med,
BgpAdvertisement_network[advert] = dstIpBlock,
BgpAdvertisement_nextHopIp[advert] = nextHopIp,
BgpAdvertisement_originatorIp[advert] = originatorIp,
BgpAdvertisement_originType[advert] = originType,
BgpAdvertisement_srcIp[advert] = srcIp,
BgpAdvertisement_srcNode[advert] = srcNode,
BgpAdvertisement_srcProtocol[advert] = srcProtocol,
BgpAdvertisement_type[advert] = type,
ParentAdvertisement(prevAdvert, advert),
AdvertisementPathSize[advert] = pathSize
<-
   type = AdvertisementType_IBGP[],
   priorType = AdvertisementType_IBGP_TI[],
   BgpAdvertisement_dstNode[prevAdvert] = srcNode,
   BgpAdvertisement_localPref[prevAdvert] = localPref,
   BgpAdvertisement_med[prevAdvert] = med,
   BgpAdvertisement_network[prevAdvert] = dstIpBlock,
   BgpAdvertisement_nextHopIp[prevAdvert] = nextHopIp,
   BgpAdvertisement_originatorIp[prevAdvert] = prevOriginatorIp,
   BgpAdvertisement_originType[prevAdvert] = originType,
   BgpAdvertisement_srcIp[prevAdvert] = senderIp,
   BgpAdvertisement_srcProtocol[prevAdvert] = srcProtocol,
   BgpAdvertisement_type[prevAdvert] = priorType,
   AdvertisementPathSize[prevAdvert] = pathSize,
   InstalledBgpAdvertisement(prevAdvert),
   BestBgpAdvertisement(prevAdvert),
   (
      (
         Ip_NONE[] != prevOriginatorIp,
         originatorIp = prevOriginatorIp
      ) ;
      (
         Ip_NONE[] = prevOriginatorIp,
         originatorIp = senderIp
      )
   ),
   (
      RouteReflectorClient(srcNode, senderIp, _) ;
      (
         !RouteReflectorClient(srcNode, senderIp, _),
         RouteReflectorClient(srcNode, dstIp, _)
      )
   ),
   IbgpNeighbors(srcNode, srcIp, dstNode, dstIp).

RouteReflectorClient(node, neighborIp, clusterId) <-
   SetRouteReflectorClient(node, neighborNetwork, clusterId),
   NetworkOf[neighborIp, _] = neighborNetwork.

SetRouteReflectorClient(node, neighborNetwork, clusterId) <-
   SetRouteReflectorClient_flat(node, neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length, clusterId),
   Network_constructor[neighborNetwork_start, neighborNetwork_end, neighborNetwork_prefix_length] = neighborNetwork.

lang:compiler:error:ENTITY_CREATION_RECURSION[]=false.
lang:compiler:warning:ENTITY_CREATION_RECURSION[]=false.

// END CODE
   })

} <-- .
