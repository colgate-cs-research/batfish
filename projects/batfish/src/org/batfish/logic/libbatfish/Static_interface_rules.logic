block(`Static_interface_rules) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

SetStaticIntRoute(node, network, nextHopIp, nextHopInt, admin, tag) <-
   SetStaticIntRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, nextHopInt, admin, tag),
   Network_constructor[network_start, network_end, prefix_length] = network.

// static route with next hop interface
StaticIntRoute(route),
   Route(route),
   InterfaceRoute_constructor[node, network, nextHopInt, protocol] = route,
   InterfaceRoute(route),
   InterfaceRoute_nextHopInt[route] = nextHopInt,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol,
   Route_tag[route] = tag
<-
   SetStaticIntRoute(node, network, configuredNextHopIp, nextHopInt, admin, tag),
   (
      (
         configuredNextHopIp = Ip_ZERO[],
         nextHopIp = Ip_NONE[]
      ) ;
      (
         configuredNextHopIp != Ip_ZERO[],
         nextHopIp = configuredNextHopIp
      )
   ),
   cost = 0,
   protocol = RoutingProtocol_STATIC[].

// END CODE
   })
} <-- .
